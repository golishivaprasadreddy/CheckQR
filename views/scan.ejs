<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QR Code Scanner</title>

    <!-- Required Libraries -->
    <script src="https://unpkg.com/html5-qrcode"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.71/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.71/vfs_fonts.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css" />
<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>
</head>

<body class="bg-gradient-to-br from-purple-500 to-red-500 flex flex-col items-center justify-center min-h-screen p-6">

    <div class="bg-white shadow-2xl rounded-2xl p-6 w-full max-w-2xl text-center transform transition-all duration-300 hover:scale-105">
        <div class="flex items-center justify-center space-x-4 mb-4 ">
        <h2 class="text-4xl font-extrabold text-gray-800">CheckQR</h2>
            <img width="60" height="60" src="https://img.icons8.com/bubbles/100/qr-code.png" alt="qr-code"/>
        </div>
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">
            <a href="/fileupload" class="bg-blue-500 text-white px-4 py-2 rounded-lg shadow-md hover:bg-blue-700 transform transition-all hover:scale-105 text-sm sm:text-md font-semibold flex items-center gap-2 justify-center">
                üì§ Upload Excel File
            </a>
            <a href="/stored-files" class="bg-yellow-500 text-white px-4 py-2 rounded-lg shadow-md hover:bg-yellow-700 transform transition-all hover:scale-105 text-sm sm:text-md font-semibold flex items-center gap-2 justify-center">
                üìÇ View Stored Files
            </a>
            <a href="/attendance" class="bg-purple-500 text-white px-4 py-2 rounded-lg shadow-md hover:bg-purple-700 transform transition-all hover:scale-105 text-sm sm:text-md font-semibold flex items-center gap-2 justify-center">
                üìã View Attendance Table
            </a>
            <a href="/logout" class="bg-red-500 text-white px-4 py-2 rounded-lg shadow-md hover:bg-red-700 transform transition-all hover:scale-105 text-sm sm:text-md font-semibold flex items-center gap-2 justify-center">
                üö™ Logout
            </a>
        </div>

        <!-- Event Name Input -->
        <div id="event-name-container" class="mb-4 hidden gap-8">
            <input type="text" id="eventName" placeholder="Enter Event Name" class="p-3 border rounded-md text-center w-full bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300" required>
            
            <!-- Add Batch and Department Selection -->
            <div id="filters-container" class="mb-6 gap-8 bg-white p-4 rounded-lg shadow-md">
                <!-- Multi-select for Batch -->
                <div class="flex flex-col items-center">

                    <label class="text-gray-700 font-semibold mb-2">Select Batch</label>
                    <div class="flex flex-wrap gap-2">
                        <label class="flex items-center gap-2">
                            <input type="checkbox" value="2021" class="batch-checkbox" />
                            <span>2021</span>
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="checkbox" value="2022" class="batch-checkbox" />
                            <span>2022</span>
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="checkbox" value="2023" class="batch-checkbox" />
                            <span>2023</span>
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="checkbox" value="2024" class="batch-checkbox" />
                            <span>2024</span>
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="checkbox" value="2025" class="batch-checkbox" />
                            <span>2025</span>
                        </label>
                    </div>
                </div>

                <!-- Multi-select for Department -->
                <div class="flex flex-col items-center">
                    <label class="text-gray-700 font-semibold mb-2">Select Department</label>
                    <div class="flex flex-wrap gap-2">
                        <label class="flex items-center gap-2">
                            <input type="checkbox" value="CSE" class="department-checkbox" />
                            <span>CSE</span>
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="checkbox" value="ECE" class="department-checkbox" />
                            <span>ECE</span>
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="checkbox" value="EEE" class="department-checkbox" />
                            <span>EEE</span>
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="checkbox" value="CSM" class="department-checkbox" />
                            <span>CSM</span>
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="checkbox" value="CSD" class="department-checkbox" />
                            <span>CSD</span>
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="checkbox" value="IT" class="department-checkbox" />
                            <span>IT</span>
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="checkbox" value="CIVIL" class="department-checkbox" />
                            <span>CIVIL</span>
                        </label>
                        <label class="flex items-center gap-2">
                            <input type="checkbox" value="MECH" class="department-checkbox" />
                            <span>MECH</span>
                        </label>
                    </div>
                </div>
            </div>

            <!-- Update the Start Scanner Button -->
            <div class="flex justify-center items-center">
                <button onclick="startScannerWithFilters()" class="bg-green-500 text-white px-4 py-2 mt-4 rounded-lg shadow-md hover:bg-green-700 transform transition-all hover:scale-105 flex items-center justify-center gap-2">
                    üöÄ Start Scanner
                </button>
            </div>
        </div>

        <!-- Scanner Instructions -->
        <div id="scanner-container" class="hidden">
            <div id="reader" class="rounded-lg shadow-md overflow-hidden border border-gray-300 p-4"></div>

            <!-- Scan Counter -->
            <div class="mt-4 text-gray-700 font-bold text-lg">
                <span>üîç Scanned Entries: </span>
                <span id="scan-count" class="text-blue-600">0</span>
            </div>
        </div>

        <!-- Scanned Data Table -->
        <div id="result-container" class="hidden mt-6">
            <h2 class="text-xl font-semibold text-gray-700 mb-3 flex items-center gap-2">
                üìú Scanned Data
            </h2>
            <div class="overflow-x-auto rounded-lg shadow-lg">
                <table class="w-full border-collapse border border-gray-200 shadow-md rounded-lg bg-white">
                    <thead class="bg-gradient-to-r from-blue-500 to-blue-700 text-white text-md">
                        <tr>
                            <th class="px-3 py-2">Roll No</th>
                            <th class="px-3 py-2">Name</th>
                            <th class="px-3 py-2">Year & Semester</th>
                            <th class="px-3 py-2">Department</th>
                            <th class="px-3 py-2">Section</th>
                            <th class="px-3 py-2">College</th>
                            <th class="px-3 py-2">WhatsApp</th>
                            <th class="px-3 py-2">Email</th>
                        </tr>
                    </thead>
                    <tbody id="result-table" class="bg-gray-50 text-gray-800"></tbody>
                </table>
            </div>

            <!-- Action Buttons -->
            <div class="mt-5 flex flex-wrap justify-center gap-4">
                <button onclick="downloadExcel()" class="bg-green-500 text-white px-5 py-2 rounded-lg shadow-md hover:bg-green-700 transform transition-all hover:scale-105 flex items-center gap-2">
                    üì• Download Excel
                </button>
                <button onclick="downloadPDF()" class="bg-red-500 text-white px-5 py-2 rounded-lg shadow-md hover:bg-red-700 transform transition-all hover:scale-105 flex items-center gap-2">
                    üìÑ Download PDF
                </button>
                <button onclick="clearData()" class="bg-gray-600 text-white px-5 py-2 rounded-lg shadow-md hover:bg-gray-700 transform transition-all hover:scale-105 flex items-center gap-2">
                    üóëÔ∏è Clear Data
                </button>
            </div>
        </div>
    </div>
        <audio id="scanSound">
        <source src="https://www.fesliyanstudios.com/play-mp3/4386" type="audio/mpeg">
    </audio>
        <audio id="duplicateSound">
        <source src="https://www.fesliyanstudios.com/play-mp3/4386" type="audio/mpeg">
    </audio>

    <!-- Footer -->
    <footer class="mt-8 text-center text-white text-lg font-semibold">
        Developed by <span class="font-bold">GOLI SHIVAPRASAD REDDY</span> ‚ù§Ô∏è
    </footer>

    <!-- Toast Notification -->
    <div id="toast-container" class="fixed bottom-4 right-4 space-y-2"></div>

    <audio id="scanSound">
        <source src="https://www.fesliyanstudios.com/play-mp3/4386" type="audio/mpeg">
    </audio>
    <audio id="duplicateSound">
        <source src="https://www.fesliyanstudios.com/play-mp3/4390" type="audio/mpeg">
    </audio>
    <script>
        let scannedData = new Set();
    
        // Initialize the scanner and set the scan count from localStorage
        function initializeScanner() {
            const storedData = JSON.parse(localStorage.getItem("scannedData")) || [];
            const scanCountElement = document.getElementById("scan-count");
    
            // Populate the scannedData set with stored data
            storedData.forEach((data) => scannedData.add(data.rollNo));
    
            // Set the scan count from localStorage
            scanCountElement.innerText = storedData.length;
    
            const storedEventName = localStorage.getItem("eventName");
            if (storedData.length > 0) {
                document.getElementById("scanner-container").classList.remove("hidden");
                startScanner();
            } else if (!storedEventName) {
                document.getElementById("event-name-container").classList.remove("hidden");
            } else {
                document.getElementById("scanner-container").classList.remove("hidden");
                startScanner();
            }
        }
    
        function startScannerWithEventName() {
            const eventName = document.getElementById("eventName").value.trim();
            if (!eventName) {
                console.log("Please enter an event name to start the scanner!");
                return;
            }
    
            localStorage.setItem("eventName", eventName);
            document.getElementById("event-name-container").classList.add("hidden");
            document.getElementById("scanner-container").classList.remove("hidden");
    
            startScanner();
        }
    
        function startScannerWithFilters() {
            const eventName = document.getElementById("eventName").value.trim();
            const batchCheckboxes = document.querySelectorAll(".batch-checkbox");
            const departmentCheckboxes = document.querySelectorAll(".department-checkbox");

            // Get selected values for batch and department
            const selectedBatches = Array.from(batchCheckboxes)
                .filter(checkbox => checkbox.checked)
                .map(checkbox => checkbox.value);
            const selectedDepartments = Array.from(departmentCheckboxes)
                .filter(checkbox => checkbox.checked)
                .map(checkbox => checkbox.value);

            if (!eventName || selectedBatches.length === 0 || selectedDepartments.length === 0) {
                console.log("Please select an event name, at least one batch, and at least one department to start the scanner!");
                return;
            }

            // Store the selected values in localStorage
            localStorage.setItem("eventName", eventName);
            localStorage.setItem("batches", JSON.stringify(selectedBatches));
            localStorage.setItem("departments", JSON.stringify(selectedDepartments));

            document.getElementById("event-name-container").classList.add("hidden");
            document.getElementById("scanner-container").classList.remove("hidden");

            startScanner();
        }
    
        function startScanner() {
            let scanner = new Html5QrcodeScanner("reader", { fps: 10, qrbox: 250 });
            scanner.render(onScanSuccess);
        }
    
        function onScanSuccess(decodedText) {
    const today = new Date().toISOString().split("T")[0]; // Format: YYYY-MM-DD

    // ‚úÖ Check if already scanned
    if (scannedData.has(decodedText)) {
        document.getElementById("duplicateSound").play();
        return;
    }

    // ‚úÖ Extract and validate date from QR
    const dateLine = decodedText.split("\n").find(line => line.toLowerCase().includes("date"));
    if (!dateLine) {
        showToast("Invalid QR format: Date missing!", "error");
        return;
    }

    const scannedDate = dateLine.split(":")[1]?.trim();
    if (scannedDate !== today) {
        showToast(`Invalid Date!\nThis QR is for ${scannedDate}, not ${today}.`, "error");
        document.getElementById("duplicateSound").play();
        return;
    }

    // ‚úÖ Proceed if valid and not duplicate
    document.getElementById("scanSound").play();
    scannedData.add(decodedText);

    let data = parseScannedData(decodedText);
    if (data) {
        saveToLocalStorage(data);
        renderTable();
    }
}

        function parseScannedData(text) {
            let lines = text.split("\n");
            let data = {};
    
            lines.forEach(line => {
                let parts = line.split(": ");
                if (parts.length === 2) {
                    let key = parts[0].trim().toLowerCase();
                    let value = parts[1].trim();
    
                    if (key.includes("roll no")) data.rollNo = value;
                    else if (key.includes("name")) data.name = value;
                    else if (key.includes("year")) data.yearSemester = value;
                    else if (key.includes("department")) data.department = value;
                    else if (key.includes("section")) data.section = value;
                    else if (key.includes("college")) data.college = value;
                    else if (key.includes("whatsapp") || key.includes("phone")) data.whatsapp = value;
                    else if (key.includes("email") || key.includes("mail")) data.email = value;
                }
            });
    
            return data.rollNo ? data : null;
        }
    
        function saveToLocalStorage(data) {
            let storedData = JSON.parse(localStorage.getItem("scannedData")) || [];

            // Prevent duplicate entries in localStorage
            if (storedData.some(entry => entry.rollNo === data.rollNo)) {
                console.log("This QR code is already saved!");
                return;
            }

            storedData.push(data);
            localStorage.setItem("scannedData", JSON.stringify(storedData));
        }
    
        function renderTable() {
            let storedData = JSON.parse(localStorage.getItem("scannedData")) || [];
            let tableBody = document.getElementById("result-table");
            let resultContainer = document.getElementById("result-container");
            let scanCount = document.getElementById("scan-count");
    
            tableBody.innerHTML = "";
            storedData.forEach((data) => {
                let newRow = `<tr class="border-b border-gray-300 bg-white hover:bg-gray-100">
                    <td class="px-3 py-2">${data.rollNo}</td>
                    <td class="px-3 py-2">${data.name}</td>
                    <td class="px-3 py-2">${data.yearSemester}</td>
                    <td class="px-3 py-2">${data.department}</td>
                    <td class="px-3 py-2">${data.section}</td>
                    <td class="px-3 py-2">${data.college}</td>
                    <td class="px-3 py-2">${data.whatsapp}</td>
                    <td class="px-3 py-2">${data.email}</td>
                </tr>`;
                tableBody.insertAdjacentHTML("afterbegin", newRow);
            });
    
            scanCount.innerText = storedData.length; // Update the scan count
            if (storedData.length > 0) {
                resultContainer.classList.remove("hidden");
            }
        }
    
        // Initialize the scanner on page load
        initializeScanner();
        function downloadExcel() {
    let storedData = JSON.parse(localStorage.getItem("scannedData")) || [];
    if (storedData.length === 0) return console.log("No data to download.");

    let ws = XLSX.utils.json_to_sheet(storedData);
    let wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Scanned Data");

    let date = new Date().toLocaleDateString();
    let eventName = localStorage.getItem("eventName") || "Event";
    let fileName = `${eventName}.xlsx`;

    let footer = [
        [],
        [`Event Name: ${eventName}`],
        ["Developed by GOLI SHIVAPRASAD REDDY ‚ù§Ô∏è"],
        ["Date: " + date],
    ];
    XLSX.utils.sheet_add_aoa(ws, footer, { origin: -1 });

    let excelBlob = XLSX.write(wb, { bookType: "xlsx", type: "array" });
    let blob = new Blob([excelBlob], { type: "application/octet-stream" });

    let link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = fileName;
    link.click();

    // Perform attendance marking
    markAttendanceFromLocalStorage();
}

function downloadPDF() {
    let storedData = JSON.parse(localStorage.getItem("scannedData")) || [];
    if (storedData.length === 0) return console.log("No data to download.");

    let date = new Date().toLocaleDateString();
    let eventName = localStorage.getItem("eventName") || "Event";
    let fileName = `${eventName}.pdf`;

    let body = [["Roll No", "Name", "Year & Semester", "Department", "Section", "College", "WhatsApp", "Email"]];
    storedData.forEach((data) => {
        body.push([data.rollNo, data.name, data.yearSemester, data.department, data.section, data.college, data.whatsapp, data.email]);
    });

    let docDefinition = {
        pageOrientation: "landscape",
        pageSize: "A4",
        content: [
            { text: `${eventName} - Scanned Details`, style: "header" },
            { text: "Date: " + date, style: "subheader" },
            {
                table: {
                    headerRows: 1,
                    widths: Array(body[0].length).fill("auto"),
                    body: body,
                },
                layout: {
                    fillColor: function (rowIndex) {
                        return rowIndex === 0 ? "#CCCCCC" : null;
                    },
                },
            },
        ],
        footer: function (currentPage, pageCount) {
            return {
                text: `Developed by GOLI SHIVAPRASAD REDDY | Page ${currentPage} of ${pageCount}`,
                alignment: "center",
                margin: [0, 10, 0, 0],
                fontSize: 10,
            };
        },
        styles: {
            header: { fontSize: 18, bold: true, margin: [0, 0, 0, 10] },
            subheader: { fontSize: 14, italics: true, margin: [0, 0, 0, 10] },
        },
    };

    pdfMake.createPdf(docDefinition).download(fileName);

    // Perform attendance marking
    markAttendanceFromLocalStorage();
}

        function getCurrentDate() {
            let today = new Date();
            return today.toLocaleDateString() + " " + today.toLocaleTimeString();
        }

        function clearData() {
            // Remove scanned data and event name from localStorage
            localStorage.removeItem("scannedData");
            localStorage.removeItem("eventName");
            localStorage.removeItem("batch");
            localStorage.removeItem("department");

            // Clear the table and hide the result container
            document.getElementById("result-table").innerHTML = "";
            document.getElementById("result-container").classList.add("hidden");

            // Reset the scan count to 0
            document.getElementById("scan-count").innerText = "0";

            // Clear the scannedData set
            scannedData.clear();

            document.getElementById("eventName").value = "";
            // Optionally, show the event name input again
            document.getElementById("event-name-container").classList.remove("hidden");
            document.getElementById("scanner-container").classList.add("hidden");
        }

        let scanner = new Html5QrcodeScanner("reader", { fps: 10, qrbox: 250 });
        scanner.render(onScanSuccess);
        renderTable();

        function showToast(message, type) {
            const toast = document.createElement("div");
            toast.className = `toast ${type} bg-gray-800 text-white px-4 py-2 rounded-lg shadow-md`;
            toast.innerText = message;

            const toastContainer = document.getElementById("toast-container");
            toastContainer.appendChild(toast);

            setTimeout(() => {
                toast.remove();
            }, 3000);
        }

        function saveFileToDB(fileName, eventName, timestamp, fileData, fileType) {
    const email = localStorage.getItem("email"); // Retrieve email from localStorage
    if (!email) {
        console.error("Email not found in localStorage.");
        return;
    }

    console.log("Saving File to DB:", { fileName, eventName, timestamp, fileData, fileType }); // Debug the input

    fetch("/save-file-details", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({ fileName, eventName, timestamp, email, fileData, fileType }),
    })
        .then((response) => {
            if (response.ok) {
                console.log("File saved successfully in the database!");
            } else {
                console.error("Failed to save file in the database.");
            }
        })
        .catch((error) => {
            console.error("Error saving file in the database:", error);
        });
}

        async function markAttendanceFromLocalStorage() {
            const storedData = JSON.parse(localStorage.getItem("scannedData")) || [];
            if (storedData.length === 0) {
                console.log("No data available for attendance marking.");
                return;
            }

            const eventName = localStorage.getItem("eventName");
            const batches = JSON.parse(localStorage.getItem("batches"));
            const departments = JSON.parse(localStorage.getItem("departments"));

            if (!eventName || !batches || !departments) {
                console.log("Event name, batch, or department is missing. Please set them.");
                return;
            }

            const rollNumbers = storedData.map((data) => data.rollNo);

            try {
                const response = await fetch("/mark-attendance", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ eventName, batches, departments, rollNumbers }),
                });

                const result = await response.json();

                if (response.ok) {
                    console.log("Attendance marked successfully:", result);
                    console.log(result.message);
                } else {
                    console.error("Failed to mark attendance:", result.error);
                    console.log(`Failed to mark attendance: ${result.error}`);
                }
            } catch (error) {
                console.error("Error marking attendance:", error);
                console.log("Error marking attendance. Please check the console for details.");
            }
        }

        function getSelectedFilters() {
            // Get selected batches
            const selectedBatches = Array.from(document.querySelectorAll(".batch-checkbox:checked")).map(
                (checkbox) => checkbox.value
            );

            // Get selected departments
            const selectedDepartments = Array.from(document.querySelectorAll(".department-checkbox:checked")).map(
                (checkbox) => checkbox.value
            );

            console.log("Selected Batches:", selectedBatches);
            console.log("Selected Departments:", selectedDepartments);

            return { selectedBatches, selectedDepartments };
        }
    </script>
</body>
</html>
